name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  draft_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}

    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Changes in this Release
            - First Change
            - Second Change
          draft: true
          prerelease: false

  release-linux:
    name: Create Release for Linux (static)
    needs: draft_release
    runs-on: ubuntu-latest
    container: alpine:3.12
    steps:
      - name: Install system dependencies
        run: |
          apk add --no-cache curl gcc g++ gmp-dev ncurses-dev libffi-dev make xz gzip tar perl git bash sudo binutils-gold
          apk add --no-cache zlib zlib-dev zlib-static gmp gmp-dev ncurses-static

      - name: Install ghcup
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://downloads.haskell.org/~ghcup/x86_64-linux-ghcup > /usr/bin/ghcup
          chmod +x /usr/bin/ghcup
          echo "$HOME/.ghcup/bin" $GITHUB_PATH
        shell: bash

      - name: Install GHC and cabal
        run: |
          ghcup install ghc   --force -i /usr/local     9.6.4
          ghcup install cabal --force -i /usr/local/bin 3.10.2.1
        shell: bash

      - name: Update cabal cache
        run: cabal update
        shell: bash

      - name: Checkout code
        uses: actions/checkout@v2

      - name: create ~/.local/bin
        run: mkdir -p "$HOME/.local/bin"
        shell: bash

      - name: Add ~/.local/bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash

      - name: Install shelltestrunner
        run: cabal install --installdir="$HOME/.local/bin" --install-method=copy --overwrite-policy=always shelltestrunner
        shell: bash

      - name: Install cabal dependencies
        run: cabal build --only-dependencies --ghc-options='-split-sections -optl-static'
        shell: bash

      - name: Install
        run: cabal install --installdir="$HOME/.local/bin" --install-method=copy --overwrite-policy=always --ghc-options='-split-sections -optl-static'
        shell: bash

      - name: Strip
        run: strip ~/.local/bin/stack2cabal
        shell: bash

      - name: Run tests
        run: cabal test --ghc-options='-split-sections -optl-static' all
        shell: bash

      - name: Run shelltest tests
        run: cabal exec --offline --verbose=0 sh -- -c 'shelltest shelltest.test'
        shell: bash

      - run: echo "HOME=$HOME" >> $GITHUB_ENV
        shell: bash

      - name: Upload Release Asset (binaries)
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft_release.outputs.upload_url }}
          asset_path: ${{ env.HOME }}/.local/bin/stack2cabal
          asset_name: stack2cabal-linux
          asset_content_type: application/octet-stream

      - name: pack up shell completions
        run: |
          mkdir -p completions/{bash,zsh,fish}
          ~/.local/bin/stack2cabal --bash-completion-script stack2cabal > completions/bash/stack2cabal.sh
          ~/.local/bin/stack2cabal --zsh-completion-script stack2cabal > completions/zsh/_stack2cabal
          ~/.local/bin/stack2cabal --fish-completion-script stack2cabal > completions/fish/stack2cabal.fish
          tar caf completions.tar.gz completions/
        shell: bash

      - name: Upload Release Asset (completions)
        id: upload-release-asset-completions
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft_release.outputs.upload_url }}
          asset_path: ./completions.tar.gz
          asset_name: completions.tar.gz
          asset_content_type: application/gzip

      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: plan.json
          path: ./dist-newstyle/cache/plan.json

  release-mac-win:
    name: Create Release for macOS/windows
    needs: draft_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - macOS-latest
          - windows-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - uses: haskell-actions/setup@v2
        with:
          ghc-version: 8.10.7
          cabal-version: 3.6.2.0

      - name: create ~/.local/bin
        run: mkdir -p "$HOME/.local/bin"
        shell: bash

      - name: Add ~/.local/bin to PATH
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH
        shell: bash
        if: matrix.os != 'windows-latest'

      - name: Add ~/.local/bin to PATH
        run: echo "C:\\Users\\runneradmin\\.local\\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        if: matrix.os == 'windows-latest'

      - name: debug
        run: |
          echo $Env:Path

      - name: Update cabal cache
        run: cabal update
        shell: bash

      - name: Install shelltestrunner
        run: cabal install --installdir="$HOME/.local/bin" --install-method=copy --overwrite-policy=always -f _regex-posix-clib shelltestrunner
        shell: bash

      - name: Install cabal dependencies
        run: cabal build --only-dependencies
        shell: bash

      - name: Install
        run: cabal install --installdir="$HOME/.local/bin" --install-method=copy --overwrite-policy=always
        shell: bash

      - name: Strip mac
        if: matrix.os == 'macOS-latest'
        run: strip ~/.local/bin/stack2cabal
        shell: bash

      - name: Run tests
        run: cabal test --ghc-options='-split-sections -optl-static' all
        shell: bash

      - if: matrix.os == 'macOS-latest'
        name: Install git
        run: brew install git

      - if: matrix.os == 'windows-latest'
        name: Install git
        run: choco install git

      - name: Run shelltest tests
        run: cabal exec --offline --verbose=0 sh -- -c 'shelltest shelltest.test'
        shell: bash

      - run: echo "HOME=$HOME" >> $GITHUB_ENV
        shell: bash

      - if: matrix.os != 'windows-latest'
        run: echo "ASSET_PATH=$HOME/.local/bin/stack2cabal" >> $GITHUB_ENV
        shell: bash

      - if: matrix.os == 'windows-latest'
        run: echo "ASSET_PATH=C:\\Users\\runneradmin\\.local\\bin\\stack2cabal.exe" >> $GITHUB_ENV
        shell: bash

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.draft_release.outputs.upload_url }}
          asset_path: ${{ env.ASSET_PATH }}
          asset_name: stack2cabal-${{ matrix.os }}
          asset_content_type: application/octet-stream

      - if: always()
        uses: actions/upload-artifact@v2
        with:
          name: plan.json
          path: ./dist-newstyle/cache/plan.json
